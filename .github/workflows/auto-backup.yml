name: WhatsApp Manager Platform - Smart Auto Backup System

on:
  # Backup diário automático
  schedule:
    - cron: '0 2 * * *'  # 2 AM UTC daily
  
  # Backup a cada push na main
  push:
    branches: [ main ]
  
  # Backup a cada release
  release:
    types: [ published ]
  
  # Backup manual
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Tipo de backup'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - database
        - config
        - code

jobs:
  # Backup Inteligente
  smart-backup:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Para ter histórico completo
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/api/package-lock.json
    
    - name: Install dependencies
      run: |
        cd apps/api
        npm ci
    
    - name: Determine backup strategy
      id: backup-strategy
      run: |
        # Verifica se houve mudanças significativas
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "trigger=push" >> $GITHUB_OUTPUT
          echo "backup_type=full" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "release" ]; then
          echo "trigger=release" >> $GITHUB_OUTPUT
          echo "backup_type=full" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "schedule" ]; then
          echo "trigger=schedule" >> $GITHUB_OUTPUT
          echo "backup_type=database" >> $GITHUB_OUTPUT
        else
          echo "trigger=manual" >> $GITHUB_OUTPUT
          echo "backup_type=${{ github.event.inputs.backup_type }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create smart backup
      run: |
        cd scripts
        node smart-backup.js --type=${{ steps.backup-strategy.outputs.backup_type }} --trigger=${{ steps.backup-strategy.outputs.trigger }}
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        BACKUP_S3_BUCKET: ${{ secrets.BACKUP_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update backup status
      run: |
        echo "Backup completed successfully at $(date)" > backup-status.txt
        echo "Type: ${{ steps.backup-strategy.outputs.backup_type }}" >> backup-status.txt
        echo "Trigger: ${{ steps.backup-strategy.outputs.trigger }}" >> backup-status.txt
        echo "Commit: ${{ github.sha }}" >> backup-status.txt
    
    - name: Upload backup status
      uses: actions/upload-artifact@v4
      with:
        name: backup-status-${{ github.run_number }}
        path: backup-status.txt
        retention-days: 30

  # Notificação Inteligente
  smart-notification:
    needs: smart-backup
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send success notification
      if: needs.smart-backup.result == 'success'
      run: |
        echo "✅ Backup completed successfully!"
        echo "📅 Date: $(date)"
        echo "🔄 Type: ${{ github.event.inputs.backup_type || 'automatic' }}"
        echo "📊 Status: All systems operational"
    
    - name: Send failure notification
      if: needs.smart-backup.result == 'failure'
      run: |
        echo "❌ Backup failed!"
        echo "📅 Date: $(date)"
        echo "🔄 Type: ${{ github.event.inputs.backup_type || 'automatic' }}"
        echo "🚨 Action required: Check logs and retry"
        exit 1
